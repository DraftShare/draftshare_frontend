/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WordCardImport } from './routes/word-card'
import { Route as SettingsPageImport } from './routes/settings-page'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsSetsOfFieldsImport } from './routes/settings/sets-of-fields'
import { Route as SettingsChangePropertiesImport } from './routes/settings/change-properties'
import { Route as SettingsSetOfFieldsIndexImport } from './routes/settings/set-of-fields/index'
import { Route as SettingsSetOfFieldsIdImport } from './routes/settings/set-of-fields/$id'

// Create/Update Routes

const WordCardRoute = WordCardImport.update({
  id: '/word-card',
  path: '/word-card',
  getParentRoute: () => rootRoute,
} as any)

const SettingsPageRoute = SettingsPageImport.update({
  id: '/settings-page',
  path: '/settings-page',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetsOfFieldsRoute = SettingsSetsOfFieldsImport.update({
  id: '/settings/sets-of-fields',
  path: '/settings/sets-of-fields',
  getParentRoute: () => rootRoute,
} as any)

const SettingsChangePropertiesRoute = SettingsChangePropertiesImport.update({
  id: '/settings/change-properties',
  path: '/settings/change-properties',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetOfFieldsIndexRoute = SettingsSetOfFieldsIndexImport.update({
  id: '/settings/set-of-fields/',
  path: '/settings/set-of-fields/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetOfFieldsIdRoute = SettingsSetOfFieldsIdImport.update({
  id: '/settings/set-of-fields/$id',
  path: '/settings/set-of-fields/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/settings-page': {
      id: '/settings-page'
      path: '/settings-page'
      fullPath: '/settings-page'
      preLoaderRoute: typeof SettingsPageImport
      parentRoute: typeof rootRoute
    }
    '/word-card': {
      id: '/word-card'
      path: '/word-card'
      fullPath: '/word-card'
      preLoaderRoute: typeof WordCardImport
      parentRoute: typeof rootRoute
    }
    '/settings/change-properties': {
      id: '/settings/change-properties'
      path: '/settings/change-properties'
      fullPath: '/settings/change-properties'
      preLoaderRoute: typeof SettingsChangePropertiesImport
      parentRoute: typeof rootRoute
    }
    '/settings/sets-of-fields': {
      id: '/settings/sets-of-fields'
      path: '/settings/sets-of-fields'
      fullPath: '/settings/sets-of-fields'
      preLoaderRoute: typeof SettingsSetsOfFieldsImport
      parentRoute: typeof rootRoute
    }
    '/settings/set-of-fields/$id': {
      id: '/settings/set-of-fields/$id'
      path: '/settings/set-of-fields/$id'
      fullPath: '/settings/set-of-fields/$id'
      preLoaderRoute: typeof SettingsSetOfFieldsIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/set-of-fields/': {
      id: '/settings/set-of-fields/'
      path: '/settings/set-of-fields'
      fullPath: '/settings/set-of-fields'
      preLoaderRoute: typeof SettingsSetOfFieldsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings-page': typeof SettingsPageRoute
  '/word-card': typeof WordCardRoute
  '/settings/change-properties': typeof SettingsChangePropertiesRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings-page': typeof SettingsPageRoute
  '/word-card': typeof WordCardRoute
  '/settings/change-properties': typeof SettingsChangePropertiesRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/settings-page': typeof SettingsPageRoute
  '/word-card': typeof WordCardRoute
  '/settings/change-properties': typeof SettingsChangePropertiesRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields/': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings-page'
    | '/word-card'
    | '/settings/change-properties'
    | '/settings/sets-of-fields'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings-page'
    | '/word-card'
    | '/settings/change-properties'
    | '/settings/sets-of-fields'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields'
  id:
    | '__root__'
    | '/'
    | '/settings-page'
    | '/word-card'
    | '/settings/change-properties'
    | '/settings/sets-of-fields'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsPageRoute: typeof SettingsPageRoute
  WordCardRoute: typeof WordCardRoute
  SettingsChangePropertiesRoute: typeof SettingsChangePropertiesRoute
  SettingsSetsOfFieldsRoute: typeof SettingsSetsOfFieldsRoute
  SettingsSetOfFieldsIdRoute: typeof SettingsSetOfFieldsIdRoute
  SettingsSetOfFieldsIndexRoute: typeof SettingsSetOfFieldsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsPageRoute: SettingsPageRoute,
  WordCardRoute: WordCardRoute,
  SettingsChangePropertiesRoute: SettingsChangePropertiesRoute,
  SettingsSetsOfFieldsRoute: SettingsSetsOfFieldsRoute,
  SettingsSetOfFieldsIdRoute: SettingsSetOfFieldsIdRoute,
  SettingsSetOfFieldsIndexRoute: SettingsSetOfFieldsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings-page",
        "/word-card",
        "/settings/change-properties",
        "/settings/sets-of-fields",
        "/settings/set-of-fields/$id",
        "/settings/set-of-fields/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/settings-page": {
      "filePath": "settings-page.tsx"
    },
    "/word-card": {
      "filePath": "word-card.tsx"
    },
    "/settings/change-properties": {
      "filePath": "settings/change-properties.tsx"
    },
    "/settings/sets-of-fields": {
      "filePath": "settings/sets-of-fields.tsx"
    },
    "/settings/set-of-fields/$id": {
      "filePath": "settings/set-of-fields/$id.tsx"
    },
    "/settings/set-of-fields/": {
      "filePath": "settings/set-of-fields/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
