/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CardInfoImport } from './routes/card-info'
import { Route as AddCardImport } from './routes/add-card'
import { Route as LayoutRouteImport } from './routes/_layout/route'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SettingsSetsOfFieldsImport } from './routes/settings/sets-of-fields'
import { Route as SettingsChangeFieldsImport } from './routes/settings/change-fields'
import { Route as SettingsSetOfFieldsIndexImport } from './routes/settings/set-of-fields/index'
import { Route as SettingsSetOfFieldsIdImport } from './routes/settings/set-of-fields/$id'

// Create/Update Routes

const CardInfoRoute = CardInfoImport.update({
  id: '/card-info',
  path: '/card-info',
  getParentRoute: () => rootRoute,
} as any)

const AddCardRoute = AddCardImport.update({
  id: '/add-card',
  path: '/add-card',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRouteRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetsOfFieldsRoute = SettingsSetsOfFieldsImport.update({
  id: '/settings/sets-of-fields',
  path: '/settings/sets-of-fields',
  getParentRoute: () => rootRoute,
} as any)

const SettingsChangeFieldsRoute = SettingsChangeFieldsImport.update({
  id: '/settings/change-fields',
  path: '/settings/change-fields',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetOfFieldsIndexRoute = SettingsSetOfFieldsIndexImport.update({
  id: '/settings/set-of-fields/',
  path: '/settings/set-of-fields/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsSetOfFieldsIdRoute = SettingsSetOfFieldsIdImport.update({
  id: '/settings/set-of-fields/$id',
  path: '/settings/set-of-fields/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/add-card': {
      id: '/add-card'
      path: '/add-card'
      fullPath: '/add-card'
      preLoaderRoute: typeof AddCardImport
      parentRoute: typeof rootRoute
    }
    '/card-info': {
      id: '/card-info'
      path: '/card-info'
      fullPath: '/card-info'
      preLoaderRoute: typeof CardInfoImport
      parentRoute: typeof rootRoute
    }
    '/settings/change-fields': {
      id: '/settings/change-fields'
      path: '/settings/change-fields'
      fullPath: '/settings/change-fields'
      preLoaderRoute: typeof SettingsChangeFieldsImport
      parentRoute: typeof rootRoute
    }
    '/settings/sets-of-fields': {
      id: '/settings/sets-of-fields'
      path: '/settings/sets-of-fields'
      fullPath: '/settings/sets-of-fields'
      preLoaderRoute: typeof SettingsSetsOfFieldsImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/set-of-fields/$id': {
      id: '/settings/set-of-fields/$id'
      path: '/settings/set-of-fields/$id'
      fullPath: '/settings/set-of-fields/$id'
      preLoaderRoute: typeof SettingsSetOfFieldsIdImport
      parentRoute: typeof rootRoute
    }
    '/settings/set-of-fields/': {
      id: '/settings/set-of-fields/'
      path: '/settings/set-of-fields'
      fullPath: '/settings/set-of-fields'
      preLoaderRoute: typeof SettingsSetOfFieldsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteRoute
  '/add-card': typeof AddCardRoute
  '/card-info': typeof CardInfoRoute
  '/settings/change-fields': typeof SettingsChangeFieldsRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteRoute
  '/add-card': typeof AddCardRoute
  '/card-info': typeof CardInfoRoute
  '/settings/change-fields': typeof SettingsChangeFieldsRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteRoute
  '/add-card': typeof AddCardRoute
  '/card-info': typeof CardInfoRoute
  '/settings/change-fields': typeof SettingsChangeFieldsRoute
  '/settings/sets-of-fields': typeof SettingsSetsOfFieldsRoute
  '/settings/': typeof SettingsIndexRoute
  '/settings/set-of-fields/$id': typeof SettingsSetOfFieldsIdRoute
  '/settings/set-of-fields/': typeof SettingsSetOfFieldsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/add-card'
    | '/card-info'
    | '/settings/change-fields'
    | '/settings/sets-of-fields'
    | '/settings'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/add-card'
    | '/card-info'
    | '/settings/change-fields'
    | '/settings/sets-of-fields'
    | '/settings'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/add-card'
    | '/card-info'
    | '/settings/change-fields'
    | '/settings/sets-of-fields'
    | '/settings/'
    | '/settings/set-of-fields/$id'
    | '/settings/set-of-fields/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRouteRoute: typeof LayoutRouteRoute
  AddCardRoute: typeof AddCardRoute
  CardInfoRoute: typeof CardInfoRoute
  SettingsChangeFieldsRoute: typeof SettingsChangeFieldsRoute
  SettingsSetsOfFieldsRoute: typeof SettingsSetsOfFieldsRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  SettingsSetOfFieldsIdRoute: typeof SettingsSetOfFieldsIdRoute
  SettingsSetOfFieldsIndexRoute: typeof SettingsSetOfFieldsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRouteRoute: LayoutRouteRoute,
  AddCardRoute: AddCardRoute,
  CardInfoRoute: CardInfoRoute,
  SettingsChangeFieldsRoute: SettingsChangeFieldsRoute,
  SettingsSetsOfFieldsRoute: SettingsSetsOfFieldsRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  SettingsSetOfFieldsIdRoute: SettingsSetOfFieldsIdRoute,
  SettingsSetOfFieldsIndexRoute: SettingsSetOfFieldsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/add-card",
        "/card-info",
        "/settings/change-fields",
        "/settings/sets-of-fields",
        "/settings/",
        "/settings/set-of-fields/$id",
        "/settings/set-of-fields/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout/route.tsx"
    },
    "/add-card": {
      "filePath": "add-card.tsx"
    },
    "/card-info": {
      "filePath": "card-info.tsx"
    },
    "/settings/change-fields": {
      "filePath": "settings/change-fields.tsx"
    },
    "/settings/sets-of-fields": {
      "filePath": "settings/sets-of-fields.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/settings/set-of-fields/$id": {
      "filePath": "settings/set-of-fields/$id.tsx"
    },
    "/settings/set-of-fields/": {
      "filePath": "settings/set-of-fields/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
