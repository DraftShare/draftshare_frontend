/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as CollectionsIndexRouteImport } from './routes/collections/index'
import { Route as CardsIndexRouteImport } from './routes/cards/index'
import { Route as SettingsFieldsRouteImport } from './routes/settings/fields'
import { Route as SettingsFieldSetsRouteImport } from './routes/settings/field-sets'
import { Route as CollectionsCollectionIdRouteImport } from './routes/collections/$collectionId'
import { Route as CardsAddCardRouteImport } from './routes/cards/add-card'
import { Route as CardsCardIdRouteImport } from './routes/cards/$cardId'
import { Route as SettingsFieldSetsFieldSetIdRouteImport } from './routes/settings/field-sets.$fieldSetId'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsIndexRoute = CollectionsIndexRouteImport.update({
  id: '/collections/',
  path: '/collections/',
  getParentRoute: () => rootRouteImport,
} as any)
const CardsIndexRoute = CardsIndexRouteImport.update({
  id: '/cards/',
  path: '/cards/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsFieldsRoute = SettingsFieldsRouteImport.update({
  id: '/settings/fields',
  path: '/settings/fields',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsFieldSetsRoute = SettingsFieldSetsRouteImport.update({
  id: '/settings/field-sets',
  path: '/settings/field-sets',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsCollectionIdRoute = CollectionsCollectionIdRouteImport.update({
  id: '/collections/$collectionId',
  path: '/collections/$collectionId',
  getParentRoute: () => rootRouteImport,
} as any)
const CardsAddCardRoute = CardsAddCardRouteImport.update({
  id: '/cards/add-card',
  path: '/cards/add-card',
  getParentRoute: () => rootRouteImport,
} as any)
const CardsCardIdRoute = CardsCardIdRouteImport.update({
  id: '/cards/$cardId',
  path: '/cards/$cardId',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsFieldSetsFieldSetIdRoute =
  SettingsFieldSetsFieldSetIdRouteImport.update({
    id: '/$fieldSetId',
    path: '/$fieldSetId',
    getParentRoute: () => SettingsFieldSetsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/cards/$cardId': typeof CardsCardIdRoute
  '/cards/add-card': typeof CardsAddCardRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/settings/field-sets': typeof SettingsFieldSetsRouteWithChildren
  '/settings/fields': typeof SettingsFieldsRoute
  '/cards': typeof CardsIndexRoute
  '/collections': typeof CollectionsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/field-sets/$fieldSetId': typeof SettingsFieldSetsFieldSetIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/cards/$cardId': typeof CardsCardIdRoute
  '/cards/add-card': typeof CardsAddCardRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/settings/field-sets': typeof SettingsFieldSetsRouteWithChildren
  '/settings/fields': typeof SettingsFieldsRoute
  '/cards': typeof CardsIndexRoute
  '/collections': typeof CollectionsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/settings/field-sets/$fieldSetId': typeof SettingsFieldSetsFieldSetIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/cards/$cardId': typeof CardsCardIdRoute
  '/cards/add-card': typeof CardsAddCardRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
  '/settings/field-sets': typeof SettingsFieldSetsRouteWithChildren
  '/settings/fields': typeof SettingsFieldsRoute
  '/cards/': typeof CardsIndexRoute
  '/collections/': typeof CollectionsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/settings/field-sets/$fieldSetId': typeof SettingsFieldSetsFieldSetIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/profile'
    | '/cards/$cardId'
    | '/cards/add-card'
    | '/collections/$collectionId'
    | '/settings/field-sets'
    | '/settings/fields'
    | '/cards'
    | '/collections'
    | '/settings'
    | '/settings/field-sets/$fieldSetId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/profile'
    | '/cards/$cardId'
    | '/cards/add-card'
    | '/collections/$collectionId'
    | '/settings/field-sets'
    | '/settings/fields'
    | '/cards'
    | '/collections'
    | '/settings'
    | '/settings/field-sets/$fieldSetId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/profile'
    | '/cards/$cardId'
    | '/cards/add-card'
    | '/collections/$collectionId'
    | '/settings/field-sets'
    | '/settings/fields'
    | '/cards/'
    | '/collections/'
    | '/settings/'
    | '/settings/field-sets/$fieldSetId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  CardsCardIdRoute: typeof CardsCardIdRoute
  CardsAddCardRoute: typeof CardsAddCardRoute
  CollectionsCollectionIdRoute: typeof CollectionsCollectionIdRoute
  SettingsFieldSetsRoute: typeof SettingsFieldSetsRouteWithChildren
  SettingsFieldsRoute: typeof SettingsFieldsRoute
  CardsIndexRoute: typeof CardsIndexRoute
  CollectionsIndexRoute: typeof CollectionsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/': {
      id: '/collections/'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cards/': {
      id: '/cards/'
      path: '/cards'
      fullPath: '/cards'
      preLoaderRoute: typeof CardsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/fields': {
      id: '/settings/fields'
      path: '/settings/fields'
      fullPath: '/settings/fields'
      preLoaderRoute: typeof SettingsFieldsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/field-sets': {
      id: '/settings/field-sets'
      path: '/settings/field-sets'
      fullPath: '/settings/field-sets'
      preLoaderRoute: typeof SettingsFieldSetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$collectionId': {
      id: '/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cards/add-card': {
      id: '/cards/add-card'
      path: '/cards/add-card'
      fullPath: '/cards/add-card'
      preLoaderRoute: typeof CardsAddCardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cards/$cardId': {
      id: '/cards/$cardId'
      path: '/cards/$cardId'
      fullPath: '/cards/$cardId'
      preLoaderRoute: typeof CardsCardIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/field-sets/$fieldSetId': {
      id: '/settings/field-sets/$fieldSetId'
      path: '/$fieldSetId'
      fullPath: '/settings/field-sets/$fieldSetId'
      preLoaderRoute: typeof SettingsFieldSetsFieldSetIdRouteImport
      parentRoute: typeof SettingsFieldSetsRoute
    }
  }
}

interface SettingsFieldSetsRouteChildren {
  SettingsFieldSetsFieldSetIdRoute: typeof SettingsFieldSetsFieldSetIdRoute
}

const SettingsFieldSetsRouteChildren: SettingsFieldSetsRouteChildren = {
  SettingsFieldSetsFieldSetIdRoute: SettingsFieldSetsFieldSetIdRoute,
}

const SettingsFieldSetsRouteWithChildren =
  SettingsFieldSetsRoute._addFileChildren(SettingsFieldSetsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  CardsCardIdRoute: CardsCardIdRoute,
  CardsAddCardRoute: CardsAddCardRoute,
  CollectionsCollectionIdRoute: CollectionsCollectionIdRoute,
  SettingsFieldSetsRoute: SettingsFieldSetsRouteWithChildren,
  SettingsFieldsRoute: SettingsFieldsRoute,
  CardsIndexRoute: CardsIndexRoute,
  CollectionsIndexRoute: CollectionsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
